CRUDO Usage Examples
====================

This document covers examples of how to use the various features of CRUDO.


1) Generate / Update CRUD matrices for a table

begin
    crudo.generate_matrices.crud_table('HR', 'EMPLOYEES');
end;
/
commit;

If this is the first time the table has been processed by the application, it will generate a complete set of matrices.
If there are already matrices in the CRUD_MATRICES table for this user.table_name then only dependent objects with a last_ddl_time greater than the last_updated value in the table will be re-processed.
Any records with the override_flag set to 'Y' will be preserved.

2) Set or remove an override record

If, for example, you have a function called GET_EMP_RECS which references the EMPLOYEES table in a dynamic sql statement, it may well not show up in DBA_DEPENDENCIES.
In such cases, you can create an override CRUD, which the application will respect during refreshes.

To create an override record :

begin
    crudo.generate_matrices.set_override
    (
        i_table_owner => 'HR',
        i_table_name => 'EMPLOYEES'
        i_object_owner => 'HR',
        i_object_name => 'GET_EMP_RECS',
        i_object_type => 'FUNCTION',
        i_create => 'N',
        i_read => 'Y',
        i_update => 'N',
        i_delete  => 'N'
    );
    commit;
end;
/

Override records will persist until you unset them. Once unset, the record will be overwritten then next time CRUD matrices are generated for the table.

To remove an override record :

begin
    crudo.generate_matrices.remove_override
    (
        i_table_owner => 'HR',
        i_table_name => 'EMPLOYEES'
        i_object_owner => 'HR',
        i_object_name => 'GET_EMP_RECS',
        i_object_type => 'FUNCTION',
    );
    commit;
end;
/

3) Generate Matrices for all tables in a Schema

begin
    crudo.generate_matrices.crud_schema('HR');
end;
/

This procedure calls CRUD_TABLES for each table in the schema. Therefore, the behaviour is similar.

4) Application Settings

There are three application settings that can be queried, two of which can be changed.

To check which version of the application is currently installed :

select crudo.generate_matrices.get_version
from dual
/


The application runs at one of three logging levels, which determine which types of message are written to the APPLICATION_LOGS table.
    ERROR - just log error messages (the default)
    INFO  - Information and error messages
    DEBUG - all messages
    
To see what the current session setting is :

select crudo.generate_matrices.get_log_level
from dual
/

To change the log level for the current session :
begin
    crudo.generate_matrices.set_log_level('INFO');
end;
/

Valid levels are ERROR, INFO and DEBUG.


The processing of the search of dependent objects on a table is done using a BULK COLLECT. You can amend the limit setting for this statement.
To find the current setting :

select crudo.generate_matrices.get_bulk_collect_limit
from dual
/

To amend the Bulk Collect limit for this session :

begin
    crudo.generate_matrices.set_bulk_collect_limit(10000);
end;
/

